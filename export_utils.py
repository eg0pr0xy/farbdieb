import json
import csv
import struct
from typing import List, Tuple, Dict

class SwatchExporter:
    """Export color swatches in various professional formats"""
    
    @staticmethod
    def export_adobe_ase(colors: List[Tuple[str, Tuple[int, int, int], str]], filename: str):
        """Export colors as Adobe Swatch Exchange (.ASE) file"""
        try:
            with open(filename, 'wb') as f:
                # ASE file header
                f.write(b'ASEF')  # File signature
                f.write(struct.pack('>HH', 1, 0))  # Version
                f.write(struct.pack('>L', len(colors)))  # Number of blocks
                
                for hex_color, rgb_color, pantone_name in colors:
                    # Block header
                    f.write(struct.pack('>H', 0x0001))  # Block type (color entry)
                    
                    # Color name (UTF-16)
                    name = pantone_name or hex_color
                    name_utf16 = name.encode('utf-16be')
                    name_length = len(name_utf16) // 2 + 1
                    block_length = 4 + 2 + name_length * 2 + 16
                    
                    f.write(struct.pack('>L', block_length))  # Block length
                    f.write(struct.pack('>H', name_length))   # Name length
                    f.write(name_utf16)                       # Name
                    f.write(b'\x00\x00')                     # Name terminator
                    
                    # Color model (RGB)
                    f.write(b'RGB ')
                    
                    # RGB values (32-bit floats)
                    r, g, b = rgb_color
                    f.write(struct.pack('>fff', r/255.0, g/255.0, b/255.0))
                    
                    # Color type (0 = global, 1 = spot, 2 = normal)
                    f.write(struct.pack('>H', 2))
            
            return True
        except Exception as e:
            print(f"Error exporting ASE: {e}")
            return False
    
    @staticmethod 
    def export_json(colors: List[Dict], filename: str):
        """Export comprehensive color analysis as JSON"""
        try:
            # Check if oil paint data is available
            has_oil_paints = any('oil_paints' in color for color in colors)
            theories = ['Goethe', 'Itten', 'Pantone']
            if has_oil_paints:
                theories.append('Oil Paints')
            
            export_data = {
                'metadata': {
                    'generator': 'FARBDIEB Color Extraction Tool',
                    'version': '2.1',
                    'color_count': len(colors),
                    'theories': theories,
                    'features': {
                        'color_psychology': True,
                        'color_harmonies': True,
                        'pantone_matching': True,
                        'oil_paint_matching': has_oil_paints,
                        'mixing_recipes': has_oil_paints
                    }
                },
                'colors': colors
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            return True
        except Exception as e:
            print(f"Error exporting JSON: {e}")
            return False
    
    @staticmethod
    def export_css_variables(colors: List[Tuple[str, Tuple[int, int, int], str]], filename: str):
        """Export colors as CSS custom properties"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("/* FARBDIEB Color Variables */\n")
                f.write("/* Generated by FARBDIEB Color Extraction Tool */\n\n")
                f.write(":root {\n")
                
                for i, (hex_color, rgb_color, pantone_name) in enumerate(colors):
                    # Create CSS variable name
                    css_name = pantone_name.lower().replace(' ', '-').replace('(', '').replace(')', '')
                    if not css_name or css_name in ['white', 'black']:
                        css_name = f"color-{i+1}"
                    
                    # Write CSS variables
                    f.write(f"  --{css_name}: {hex_color};\n")
                    f.write(f"  --{css_name}-rgb: {rgb_color[0]}, {rgb_color[1]}, {rgb_color[2]};\n")
                    
                f.write("}\n\n")
                
                # Write utility classes
                f.write("/* Utility Classes */\n")
                for i, (hex_color, rgb_color, pantone_name) in enumerate(colors):
                    css_name = pantone_name.lower().replace(' ', '-').replace('(', '').replace(')', '')
                    if not css_name or css_name in ['white', 'black']:
                        css_name = f"color-{i+1}"
                    
                    f.write(f".bg-{css_name} {{ background-color: var(--{css_name}); }}\n")
                    f.write(f".text-{css_name} {{ color: var(--{css_name}); }}\n")
                    f.write(f".border-{css_name} {{ border-color: var(--{css_name}); }}\n\n")
            
            return True
        except Exception as e:
            print(f"Error exporting CSS: {e}")
            return False
    
    @staticmethod
    def export_scss_variables(colors: List[Tuple[str, Tuple[int, int, int], str]], filename: str):
        """Export colors as SCSS variables"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("// FARBDIEB Color Variables\n")
                f.write("// Generated by FARBDIEB Color Extraction Tool\n\n")
                
                for i, (hex_color, rgb_color, pantone_name) in enumerate(colors):
                    scss_name = pantone_name.lower().replace(' ', '-').replace('(', '').replace(')', '')
                    if not scss_name or scss_name in ['white', 'black']:
                        scss_name = f"color-{i+1}"
                    
                    f.write(f"${scss_name}: {hex_color};\n")
                
                f.write("\n// Color map for easier iteration\n")
                f.write("$colors: (\n")
                
                for i, (hex_color, rgb_color, pantone_name) in enumerate(colors):
                    scss_name = pantone_name.lower().replace(' ', '-').replace('(', '').replace(')', '')
                    if not scss_name or scss_name in ['white', 'black']:
                        scss_name = f"color-{i+1}"
                    
                    comma = "," if i < len(colors) - 1 else ""
                    f.write(f"  '{scss_name}': {hex_color}{comma}\n")
                
                f.write(");\n")
            
            return True
        except Exception as e:
            print(f"Error exporting SCSS: {e}")
            return False
    
    @staticmethod
    def export_figma_tokens(colors: List[Tuple[str, Tuple[int, int, int], str]], filename: str):
        """Export colors as Figma Design Tokens"""
        try:
            tokens = {
                "colors": {},
                "$metadata": {
                    "tokenSetOrder": ["colors"],
                    "generator": "FARBDIEB Color Extraction Tool"
                }
            }
            
            for i, (hex_color, rgb_color, pantone_name) in enumerate(colors):
                token_name = pantone_name.lower().replace(' ', '-').replace('(', '').replace(')', '')
                if not token_name or token_name in ['white', 'black']:
                    token_name = f"color-{i+1}"
                
                tokens["colors"][token_name] = {
                    "value": hex_color,
                    "description": f"Extracted color: {pantone_name}",
                    "type": "color"
                }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(tokens, f, indent=2, ensure_ascii=False)
            
            return True
        except Exception as e:
            print(f"Error exporting Figma tokens: {e}")
            return False
    
    @staticmethod
    def export_oil_paint_palette(colors: List[Dict], filename: str):
        """Export oil paint palette with mixing instructions"""
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                
                # Header
                writer.writerow([
                    'HEX', 'RGB', 'Pantone', 'Ã–lfarbe', 'Pigment', 'Marke', 'Serie',
                    'Transparenz', 'Trocknungszeit', 'Lichtechtheit', 'Preiskategorie',
                    'Mischungsvorschlag', 'Mischungsrezept', 'Maltipps'
                ])
                
                for color_data in colors:
                    hex_val = color_data['basic']['hex']
                    rgb_val = color_data['basic']['rgb']
                    
                    # Try to get oil paint data
                    if 'oil_paints' in color_data:
                        oil_data = color_data['oil_paints']
                        paint = oil_data.get('closest_pure_paint')
                        
                        if paint:
                            # Main paint info
                            paint_name = paint.name
                            pigment = paint.pigment
                            brand = paint.brand
                            series = str(paint.series)
                            opacity = paint.opacity
                            drying_time = paint.drying_time
                            lightfastness = f"{paint.lightfastness}/4"
                            price_category = paint.price_category
                            
                            # Mixing suggestions
                            mixing_suggestion = ""
                            mixing_recipe = ""
                            if oil_data.get('suggested_mixtures'):
                                best_mix = oil_data['suggested_mixtures'][0]
                                mixing_suggestion = best_mix['name']
                                components = best_mix['recipe']['components']
                                ratios = best_mix['recipe']['ratios']
                                mixing_recipe = '; '.join([f"{comp}: {ratio}" for comp, ratio in zip(components, ratios)])
                            
                            # Painting tips (first tip only for CSV)
                            painting_tips = ""
                            if oil_data.get('painting_tips'):
                                painting_tips = oil_data['painting_tips'][0].replace('\n', ' ')
                            
                            writer.writerow([
                                hex_val, rgb_val, '', paint_name, pigment, brand, series,
                                opacity, drying_time, lightfastness, price_category,
                                mixing_suggestion, mixing_recipe, painting_tips
                            ])
                        else:
                            # No oil paint match found
                            writer.writerow([
                                hex_val, rgb_val, '', 'Keine direkte Entsprechung', '', '', '',
                                '', '', '', '', '', '', 'Mischung erforderlich'
                            ])
                    else:
                        # No oil paint analysis available
                        writer.writerow([
                            hex_val, rgb_val, '', 'Analyse nicht verfÃ¼gbar', '', '', '',
                            '', '', '', '', '', '', ''
                        ])
            
            return True
        except Exception as e:
            print(f"Error exporting oil paint palette: {e}")
            return False 